# This is a basic workflow to help you get started with Actions

name: NASA HUD CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [master]
    tags:
      - '*'
  pull_request:
    branches: [master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

        - name: Cache node modules
          uses: actions/cache@v1
          with:
            path: ~/.npm
            key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
            restore-keys: |
              ${{ runner.os }}-node-
  
        # Runs a single command using the runners shell
        - name: Use Node.js
          uses: actions/setup-node@v1
  
        - name: Install modules
          working-directory: backend/
          run: |
            npm ci
            npm run test
            echo "$(cat .coverage/lcov.info)"
  
        - name: fix code coverage paths
          working-directory: backend/.coverage
          run: sed -i 's/\/home\/runner\/work\/nasa.hud\/nasa.hud\//\/github\/workspace\//g' lcov.info
  
        - name: SonarCloud Scan
          uses: SonarSource/sonarcloud-github-action@v1.1
          continue-on-error: true
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            SONAR_TOKEN: ${{ secrets.NASA_SONAR }}

  deploy-docker-client:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@master
        env:
          BASE_PATH: './frontend'
        with:
          name: umgccaps/nasa.hud.client.dev
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          snapshot: true
          workdir: frontend

  deploy-docker-server:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@master
        env:
          BASE_PATH: './backend'
        with:
          name: umgccaps/nasa.hud.server.dev
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          snapshot: true
          workdir: backend

  deploy-heroku-server:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Login to Heroku Container registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_TOKEN }}
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_SERVER_DEV_NAME }}
        run: heroku container:login
      - name: Build and push
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_TOKEN }}
        working-directory: ./backend/
        run: heroku container:push web -a ${{ secrets.HEROKU_APP_SERVER_DEV_NAME }}
      - name: Release
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_TOKEN }}
        working-directory: ./backend/
        run: heroku container:release web -a ${{ secrets.HEROKU_APP_SERVER_DEV_NAME }}

  deploy-heroku-client:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Login to Heroku Container registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_TOKEN }}
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_CLIENT_DEV_NAME }}
        run: heroku container:login
      - name: Build and push
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_TOKEN }}
        working-directory: ./frontend/
        run: heroku container:push web -a ${{ secrets.HEROKU_APP_CLIENT_DEV_NAME }}
      - name: Release
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_TOKEN }}
        working-directory: ./frontend/
        run: heroku container:release web -a ${{ secrets.HEROKU_APP_CLIENT_DEV_NAME }}
